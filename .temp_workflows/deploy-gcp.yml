name: Deploy DirectorX to GCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: directorx-api

jobs:
  # テスト実行
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            api/package-lock.json
            web/package-lock.json

      - name: Install dependencies (API)
        working-directory: ./api
        run: npm ci

      - name: Install dependencies (Web)
        working-directory: ./web
        run: npm ci

      - name: Run API tests
        working-directory: ./api
        run: npm test
        env:
          NODE_ENV: test

      - name: Run Web tests
        working-directory: ./web
        run: npm test -- --run
        env:
          NODE_ENV: test

  # バックエンドAPI デプロイ
  deploy-api:
    needs: test
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    outputs:
      api-url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Configure Docker for Google Cloud
        run: gcloud auth configure-docker

      - name: Build Docker image
        working-directory: ./api
        run: |
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest .

      - name: Push Docker image
        run: |
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --set-env-vars NODE_ENV=production,CORS_ORIGIN=https://${{ env.PROJECT_ID }}.web.app \
            --set-cloudsql-instances ${{ secrets.CLOUDSQL_CONNECTION_NAME }} \
            --quiet
          
          # API URLを取得
          API_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          echo "url=$API_URL" >> $GITHUB_OUTPUT
          echo "✅ API deployed to: $API_URL"

      - name: Update Firebase config with API URL
        run: |
          # firebase.json の API URL を更新
          sed -i 's|https://directorx-api-YOUR_REGION.a.run.app|${{ steps.deploy.outputs.url }}|g' firebase.json

      - name: Run API health check
        run: |
          sleep 30  # デプロイ完了待機
          curl -f ${{ steps.deploy.outputs.url }}/health || exit 1
          echo "✅ API health check passed"

  # フロントエンド デプロイ
  deploy-frontend:
    needs: [test, deploy-api]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Build frontend
        working-directory: ./web
        run: |
          # API URL を環境変数として設定
          echo "VITE_API_BASE_URL=${{ needs.deploy-api.outputs.api-url }}" > .env.production
          echo "VITE_GCP_PROJECT_ID=${{ env.PROJECT_ID }}" >> .env.production
          npm run build
        env:
          NODE_ENV: production

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting
        working-directory: ./
        run: |
          # Firebase config ファイルを更新
          sed -i 's|https://directorx-api-YOUR_REGION.a.run.app|${{ needs.deploy-api.outputs.api-url }}|g' firebase.json
          
          # Firebase にデプロイ
          firebase deploy --only hosting --project ${{ env.PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}
        
      - name: Get Firebase Hosting URL
        run: |
          HOSTING_URL="https://${{ env.PROJECT_ID }}.web.app"
          echo "✅ Frontend deployed to: $HOSTING_URL"
          
          # デプロイ完了通知
          echo "🎉 DirectorX deployment completed!"
          echo "📱 Frontend: $HOSTING_URL"
          echo "🔧 API: ${{ needs.deploy-api.outputs.api-url }}"

  # デプロイ後テスト
  e2e-test:
    needs: [deploy-api, deploy-frontend]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install

      - name: Run E2E tests
        run: |
          # E2Eテストの実行 (将来実装)
          echo "E2E tests would run here"
          # npx playwright test
        env:
          BASE_URL: https://${{ env.PROJECT_ID }}.web.app
          API_URL: ${{ needs.deploy-api.outputs.api-url }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 7

  # Slack通知 (オプション)
  notify:
    needs: [deploy-api, deploy-frontend, e2e-test]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify deployment status
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ needs.e2e-test.result }}" == "success" ]; then
            STATUS="✅ Success"
            COLOR="good"
          else
            STATUS="❌ Failed"
            COLOR="danger"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\":\"DirectorX Deployment $STATUS\",
              \"attachments\":[{
                \"color\":\"$COLOR\",
                \"fields\":[
                  {\"title\":\"Frontend\",\"value\":\"https://${{ env.PROJECT_ID }}.web.app\",\"short\":true},
                  {\"title\":\"API\",\"value\":\"${{ needs.deploy-api.outputs.api-url }}\",\"short\":true},
                  {\"title\":\"Commit\",\"value\":\"${{ github.sha }}\",\"short\":true},
                  {\"title\":\"Branch\",\"value\":\"${{ github.ref_name }}\",\"short\":true}
                ]
              }]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}