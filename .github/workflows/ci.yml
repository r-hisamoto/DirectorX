name: DirectorX CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8.15.0
        
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Lint check
      run: pnpm run lint
    
    - name: Type check
      run: pnpm run build
      
    - name: Run tests
      run: pnpm run test
      
    - name: Test coverage
      run: pnpm run test -- --coverage --watchAll=false
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SA_KEY }}
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        file: ./api/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          gcr.io/${{ secrets.GCP_PROJECT_ID }}/directorx-api:latest
          gcr.io/${{ secrets.GCP_PROJECT_ID }}/directorx-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          gcr.io/${{ secrets.GCP_PROJECT_ID }}/directorx-backend:latest
          gcr.io/${{ secrets.GCP_PROJECT_ID }}/directorx-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Deploy API to Cloud Run
      run: |
        gcloud run deploy directorx-api \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/directorx-api:${{ github.sha }} \
          --platform managed \
          --region asia-northeast1 \
          --allow-unauthenticated \
          --set-env-vars NODE_ENV=production \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 10 \
          --timeout 900s
    
    - name: Deploy Backend to Cloud Run
      run: |
        gcloud run deploy directorx-backend \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/directorx-backend:${{ github.sha }} \
          --platform managed \
          --region asia-northeast1 \
          --allow-unauthenticated \
          --set-env-vars FLASK_ENV=production \
          --memory 4Gi \
          --cpu 4 \
          --max-instances 5 \
          --timeout 900s
    
    - name: Update Cloud Run traffic
      run: |
        gcloud run services update-traffic directorx-api --to-latest --region asia-northeast1
        gcloud run services update-traffic directorx-backend --to-latest --region asia-northeast1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'